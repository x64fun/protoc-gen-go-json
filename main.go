package main

import (
	"embed"
	"fmt"
	"strings"
	"text/template"

	"github.com/x64fun/protoc-gen-go-json/pb"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

const version = "1.0.0"

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			if _, err := generateFile(gen, f); err != nil {
				return err
			}
		}
		return nil
	})
}

//go:embed template
var templateFiles embed.FS

type GenerateData struct {
	Version       string
	ProtocVersion string
	File          protogen.File
}

const deprecationComment = "// Deprecated: Do not use."
const (
	fmtPackage     = protogen.GoImportPath("fmt")
	jsonPackage    = protogen.GoImportPath("encoding/json")
	stringsPackage = protogen.GoImportPath("strings")
)

func jsonType(i string) string {
	switch i {
	case "int", "int8", "int16", "int32", "int64",
		"uint", "uint8", "uint16", "uint32", "uint64",
		"float32", "float64":
		return "JSONNumber"
	case "string":
		return "JSONString"
	case "bool":
		return "JSONBoolean"
	case "bytes":
		return "JSONObject"
	default:
		return ""
	}
}

func generateFile(gen *protogen.Plugin, file *protogen.File) (*protogen.GeneratedFile, error) {
	filename := file.GeneratedFilenamePrefix + "_json.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-json. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-json v", version)
	g.P("// - protoc             ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	if err := template.Must(template.New("json.tmpl").ParseFS(templateFiles, "template/json.tmpl")).Execute(g, GenerateData{
		Version:       version,
		ProtocVersion: protocVersion(gen),
		File:          *file,
	}); err != nil {
		return nil, err
	}
	for _, m := range file.Messages {
		g.P("type ", m.GoIdent, "JSON struct {")
		for _, f := range m.Fields {
			_jsonTag := f.Desc.Options().ProtoReflect().Get(pb.E_JsonName.TypeDescriptor()).String()
			_jsonType := f.Desc.Options().ProtoReflect().Get(pb.E_JsonType.TypeDescriptor()).String()
			if _jsonTag == "" {
				_jsonTag = f.Desc.JSONName()
			}
			if _jsonType == "" {
				// jsonType(f.Desc.Kind().String())
				_jsonType = goType(f.Desc.Kind().String())
			} else {
				switch _jsonType {
				case "string":
					_jsonType = "JSONString"
				case "number":
					_jsonType = "JSONNumber"
				case "boolean":
					_jsonType = "JSONBoolean"
				case "object":
					_jsonType = "JSONObject"
				}
			}
			g.P(f.GoName, " ", _jsonType, "`", `json:"`, _jsonTag, `"`, "`")
		}
		g.P("}")
		g.P("func (x ", m.GoIdent, ") MarshalJSON() ([]byte, error) {")
		g.P("tmp := &", m.GoIdent, "JSON{}")
		g.P("var err error")
		g.P("_ = err")
		for _, f := range m.Fields {
			_jsonType := f.Desc.Options().ProtoReflect().Get(pb.E_JsonType.TypeDescriptor()).String()
			if _jsonType == "" {
				g.P("tmp.", f.GoName, " = ", "x.", f.GoName)
			} else {
				switch _jsonType {
				case "string":
					_jsonType = "String"
				case "number":
					_jsonType = "Number"
				case "boolean":
					_jsonType = "Boolean"
				case "object":
					_jsonType = "Object"
				}
				g.P("tmp.", f.GoName, ", err = ", _jsonType, "(x.", f.GoName, ")")
				g.P("if err != nil {")
				g.P("return nil, err")
				g.P("}")
			}
		}
		g.P("return ", jsonPackage.Ident("Marshal"), "(tmp)")
		g.P("}")
		g.P("func (x *", m.GoIdent, ") UnmarshalJSON(b []byte) error {")
		g.P("tmp := &", m.GoIdent, "JSON{}")
		g.P("err := ", jsonPackage.Ident("Unmarshal"), "(b, tmp)")
		g.P("if err != nil {")
		g.P("return ", fmtPackage.Ident("Errorf"), "(", stringsPackage.Ident("ReplaceAll"), `(err.Error(), "`, m.GoIdent, `JSON", `, `"`, m.GoIdent, `"))`)
		g.P("}")
		for _, f := range m.Fields {
			_jsonType := f.Desc.Options().ProtoReflect().Get(pb.E_JsonType.TypeDescriptor()).String()
			if _jsonType == "" {
				g.P("x.", f.GoName, " = ", "tmp.", f.GoName)
			} else {
				k := f.Desc.Kind().String()
				g.P("x.", f.GoName, ", err = ", "Get"+strings.ToUpper(k[0:1])+k[1:], "(tmp.", f.GoName, ")")
				g.P("if err != nil {")
				g.P("return err")
				g.P("}")
			}
		}
		g.P("return nil")
		g.P("}")
	}
	return g, nil
}
func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}
func goType(i string) string {
	switch i {
	case "int", "int8", "int16", "int32", "int64",
		"uint", "uint8", "uint16", "uint32", "uint64",
		"float32", "float64",
		"string",
		"bool":
		return i
	case "bytes":
		return "[]byte"
	default:
		return ""
	}
}
